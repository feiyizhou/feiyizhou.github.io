[{"content":"Namespace资源隔离原理浅析 单个容器本身，其本质就是Linux系统中的一个进程，但是在容器进程环境中，我们所使用的环境和宿主机本身其实是两套不同的环境。这主要是因为容器技术实现了资源层面上的限制和隔离，这两个功能分别依赖于Linux系统内核中所提供的cgroup和Namespace技术。本文主要讨论Namespace隔离Linux进程资源的原理，cgroup限制Linux资源的原理将在另一篇博文中做介绍。\n总体来说，Namespace是Linux内核的一项特性，它可以对内核资源进行区分，使得一个进程或同一组进程只能看到一组资源，而另一组进程看到的是不同的资源。从版本号为3.8的内核开始，目录/proc/[pid]/ns目录下会展示进程所属的所有Namespace信息，使用ls -al /proc/$$/ns查看当前进程的所属Namespace信息，如下所示：\n1 2 3 4 5 6 7 8 9 10 [root@localhost ~]# ls -al /proc/$$/ns 总用量 0 dr-x--x--x. 2 root root 0 5月 4 17:29 . dr-xr-xr-x. 9 root root 0 5月 4 15:06 .. lrwxrwxrwx. 1 root root 0 5月 4 17:29 ipc -\u0026gt; ipc:[4026531839] lrwxrwxrwx. 1 root root 0 5月 4 17:29 mnt -\u0026gt; mnt:[4026531840] lrwxrwxrwx. 1 root root 0 5月 4 17:29 net -\u0026gt; net:[4026531956] lrwxrwxrwx. 1 root root 0 5月 4 17:29 pid -\u0026gt; pid:[4026531836] lrwxrwxrwx. 1 root root 0 5月 4 17:29 user -\u0026gt; user:[4026531837] lrwxrwxrwx. 1 root root 0 5月 4 17:29 uts -\u0026gt; uts:[4026531838] 需要注意的是，这些Namespace文件都是链接文件，文件的内容格式为type:[inode number]，其中type为Namespace的类型，inode number则是用来标识唯一一个Namespace，也可以将这个inode number理解为Namespace的ID。如果两个进程的某个Namespace同时指向了同一个链接文件，说明这两个进程相关的资源在同一个Namespace中。\n而在Linux内核源码中，进程结构体task_struct很好的体现了进程和Namespace的关联关系。我们以linux-3.10.0-1160.el7版本的内核源码作为示例代码，task_struct的具体定义如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // file:include/linux/sched.h，只贴出本文关注的属性 struct task_struct { // 进程状态 volatile long state;\t/* -1 unrunnable, 0 runnable, \u0026gt;0 stopped */ ... // 进程线程的pid pid_t pid; pid_t tgid; ... // 进程树关系描述：父进程、子进程、兄弟进程 struct task_struct __rcu *real_parent; /* real parent process */ struct task_struct __rcu *parent; /* recipient of SIGCHLD, wait4() reports */ /* * children/sibling forms the list of my natural children */ struct list_head children;\t/* list of my children */ struct list_head sibling;\t/* linkage in my parent\u0026#39;s children list */ struct task_struct *group_leader;\t/* threadgroup leader */ ... // 进程调度优先级 int prio, static_prio, normal_prio; unsigned int rt_priority; ... // 进程地址空间 struct mm_struct *mm, *active_mm; ... // 进程文件系统信息（当前目录） struct fs_struct *fs; // 进程打开的文件信息 struct files_struct *files; ... // 进程所属的Namespace struct nsproxy *nsproxy; } 我们进一步关注和Namespace直接相关的最后一个属性nsproxy，其具体定义如下所示：\n1 2 3 4 5 6 7 8 9 // file:inclue/linux/nsproxy.h struct nsproxy { atomic_t count; struct uts_namespace *uts_ns; // 提供主机名隔离能力 struct ipc_namespace *ipc_ns; // 提供进程间通信的隔离能力 struct mnt_namespace *mnt_ns; // 提供磁盘挂载点和文件系统的隔离能力 struct pid_namespace *pid_ns; // 提供进程隔离能力 struct net *net_ns; // 提供网络隔离能力 }; 从内核源码可以看出，每当一个进程创建完成后，各类Namespace都会作为这个进程的属性伴随整个进程的生命周期，直到进程被杀死，对应的Namespace也就会被释放。容器化技术中，通过Namespace技术实现容器运行环境隔离的本质，其实是Linux中，对进程运行环境的隔离。到此为止，已经大概明白了容器隔离的本质，但各类Namespace实现各类资源的隔离本质还需要继续深挖。\n","date":"2023-05-04T15:43:40+08:00","image":"https://feiyizhou.github.io/p/namespace%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90%E6%A6%82%E8%BF%B0/namespace_hu1dbac644a90fa677b2242d2f6aba380f_67916_120x120_fill_box_smart1_3.png","permalink":"https://feiyizhou.github.io/p/namespace%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90%E6%A6%82%E8%BF%B0/","title":"Namespace资源隔离原理浅析(概述)"},{"content":"以Hugo-theme-stack主题搭建静态博客网站 下载博客模板 1 git clone git@github.com:feiyizhou/hugo-theme-stack-template.git 静态文件托管到git page 创建新的Repo 需要注意一下几点：\nRepository name的格式必须为${github username}.github.io，这个Repo是用来存放静态文件并托管的，这个名字也是后续的博客访问域名，以本示例为例，Repo名称为feiyizhou.github.io 该Repo必须为public 如上图所示，github会自动部署，这个过程耗时1-2分钟。注意下方的Branch选项，待会push静态文件的时候，就需要push到这个分支中\n修改config.yaml基本配置 博客信息配置 需要关注的基本配置如下图所示：\n将baseurl修改为github pages的地址，title即博客名称，修改为自己喜欢的就行\n博客头像配置 需要关注的头像配置如下图所示：\nemoji是头像右下角的表情，可以修改为自己喜欢即可，subtitle是头像下方的个性签名，可以修改为自己喜欢即可，src就是头像图片文件的部分相对地址，项目相对地址是themes/hugo-theme-stack/assets/img，选个自己的头像放置到此文件夹中，再将配置和头像文件名称修改一致即可（包含扩展名）。\n博客评论系统配置 需要关注的博客评论系统的配置如下图所示：\n如果不想开启评论，将enabled设置为false即可，如果需要开启，可以先查看第三部分内容\n生成静态文件 1 2 3 4 5 6 # 如果系统中未安装hugo，可以查看hugo-theme-stack-template中的Readme.md文件，按照文档步骤安装即可 # 生成静态文件，执行hugo后，会在当前路径下生成public文件夹，静态文件及资源都在这个文件夹中 cd hugo-theme-stack-template \u0026amp;\u0026amp; hugo # 另：hugo server 命令可以在本地启动博客，访问localhost:1313即可查看 上传静态文件到github 1 2 3 4 5 cp -r hugo-theme-stack-template/public/* feiyizhou.gitub.io/ cd feiyizhou.github.io git add . git commit -m \u0026#34;first commit\u0026#34; git push 访问博客 等待几分钟之后，直接访问github pages提供的访问地址，即可看到自己的博客\n配置gitalk 创建OAuth app 进入配置页面 点击左下方Developer settings 创建OAuth app配置 创建好client secret后，可以复制到别的地方（只展现一次，如果没复制的话，得再重新生成一个），然后点击页面最下方的Update按钮，使得生成的秘钥配置生效。\n配置config.yaml 需要关注的gitalk的相关配置如下图所示：\nowner：即github用户名 admin：同owner repo：这个仓库是用来存放评论内容的，填写创建OAuth App时填写的repo名称即可 cilentID和clientSecret即创建OAuth App后生成的ID和Secret，填入即可 更新配置 1 2 3 4 5 cp -r hugo-theme-stack-template/public/* feiyizhou.gitub.io/ cd feiyizhou.github.io git add . git commit -m \u0026#34;chage the config of gitalk\u0026#34; git push 代码上传后，等待github pages重新部署成功即可，大功告成！\n","date":"2023-04-24T18:08:41+08:00","image":"https://feiyizhou.github.io/p/%E4%BB%A5hugo-theme-stack%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/hugo_hu7c194d5125a81be1ec95e5d9c0152203_38970_120x120_fill_box_smart1_3.png","permalink":"https://feiyizhou.github.io/p/%E4%BB%A5hugo-theme-stack%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/","title":"以Hugo-theme-stack主题搭建静态博客网站"}]